const cds = require("@sap/cds");
const pdf = require("html-pdf"); // or use puppeteer
const fs = require("fs");
const path = require("path");

module.exports = async function (srv) {
  const db = await cds.connect.to("db");

  // Override READ for Deliveries â†’ sort by deliveryDate descending
  srv.on("READ", "Deliveries", async (req) => {
    return await db.run(
      SELECT.from("delivery.Deliveries").orderBy("deliveryDate desc")
    );
  });

  srv.on("scheduleDelivery", async (req) => {
    const { deliveryDate, recipient, address } = req.data.data; // âœ… fix here
    const ID = cds.utils.uuid();

    const newDelivery = {
      ID,
      deliveryDate,
      recipient,
      address,
      status: "Scheduled",
      labelPrinted: false,
    };

    await cds
      .tx(req)
      .run(INSERT.into("delivery.Deliveries").entries(newDelivery));
    return newDelivery;
  });

  srv.on("printLabel", async (req) => {
    const ID = req.data.ID;

    // 1. Fetch delivery data
    const [delivery] = await db.run(
      SELECT.from("delivery.Deliveries").where({ ID })
    );

    if (!delivery) req.reject(404, "Delivery not found");

    // 2. Update flag
    await db.run(
      UPDATE("delivery.Deliveries").set({ labelPrinted: true }).where({ ID })
    );

    // 3. Generate label HTML
    const html = `
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <style>
      body {
        font-family: Arial, sans-serif;
        padding: 20px;
      }
      .label-box {
        border: 2px dashed #444;
        padding: 20px;
        width: 400px;
        margin: auto;
      }
      .label-header {
        text-align: center;
        margin-bottom: 20px;
      }
      .label-header h2 {
        margin: 0;
        font-size: 20px;
        color: #333;
      }
      .section {
        margin-bottom: 12px;
      }
      .section-title {
        font-weight: bold;
        font-size: 14px;
        color: #222;
        margin-bottom: 4px;
      }
      .section-value {
        font-size: 13px;
        color: #000;
      }
      .footer {
        text-align: center;
        margin-top: 20px;
        font-size: 11px;
        color: #888;
      }
    </style>
  </head>
  <body>
    <div class="label-box">
      <div class="label-header">
        <h2>ðŸ“¦ Delivery Label</h2>
      </div>

      <div class="section">
        <div class="section-title">Delivery ID:</div>
        <div class="section-value">${delivery.ID}</div>
      </div>

      <div class="section">
        <div class="section-title">Recipient:</div>
        <div class="section-value">${delivery.recipient}</div>
      </div>

      <div class="section">
        <div class="section-title">Address:</div>
        <div class="section-value">${delivery.address}</div>
      </div>

      <div class="section">
        <div class="section-title">Delivery Date:</div>
        <div class="section-value">${delivery.deliveryDate}</div>
      </div>

      <div class="section">
        <div class="section-title">Status:</div>
        <div class="section-value">${delivery.status}</div>
      </div>

      <div class="footer">
        Generated by Delivery System
      </div>
    </div>
  </body>
</html>
`;
    // 4. Generate PDF in memory and return base64
    const buffer = await new Promise((resolve, reject) => {
      pdf.create(html).toBuffer((err, buffer) => {
        if (err) return reject(err);
        resolve(buffer);
      });
    });

    const base64PDF = buffer.toString("base64");

    return {
      message: "Label generated.",
      filename: `label-${ID}.pdf`,
      file: base64PDF,
    };
  });
};
